1. T: Напишіть в нотації Великого О, яка часова складність методу append класу list.
   A: O(1)
      Додавання елемента в кінець списку за допомогою методу append виконується за фіксовану кількість операцій,
      незалежно від розміру списку.
      У випадку розширені списку O(n).

2. T: Напишіть в нотації Великого О, яка часова складність перевірки входження елементу в список. Наприклад: elem in my_list.
   A: O(n), де n - кількість елементів у списку
      Перевіряється кожен елемент у списку до знаходження шуканого, або треба дійти до кінця списку, якщо елемент
      взагалі не присутній.

3.
a) T: Напишіть в нотації Великого О, яка часова складність методу pop класу list (в загальному випадку)
   A: O(n), де n - кількість елементів у списку
      Видалення елемента з будь-якого місця у списку вимагає переміщення всіх наступних елементів на одну позицію вліво.
b) T: Напишіть в нотації Великого О, яка часова складність методу pop класу list (конкретно для випадку без параметру
      або з параметром -1)
   A: O(1), оскільки не потрібно переміщати інші елементи

4. T: Напишіть в нотації Великого О, яка часова складність додавання елементу в словник.
   A: O(1), у ідеальному випадку елемент може бути вставлений безпосередньо за один крок.
      У випадку коли декілька ключів мають однаковий хеш-код і потрібно вирішити, куди зберегти значення для кожного
      ключа, а також при розширені словніка O(n)

5. T: Напишіть в нотації Великого О, яка часова складність перевірки входження елементу в словник.
      Наприклад: elem in my_dict.
   A: Хеш-таблиця: average case- O(1), worst case - O(n), де n - кількість елементів у словнику. Це може виникнути,
      наприклад, коли всі елементи мають однаковий хеш

6. T: Напишіть в нотації Великого О, яка часова складність даного коду, якщо в списку value є N елементів:
      if isinstance(value, list):
         for i in range(0, 100, 3):
            if i in value:
                value.remove(i)
   A: Перевірка isinstance(value, list) вимагає O(1) часу, оскільки це просто перевірка типу.
      Цикл for i in range(0, 100, 3) виконується фіксовану кількість разів (34 рази), тому його часова складність
      є константною O(1).
      Умова if i in value перевіряє наявність значення i у списку value. Ця операція у середньому має часову
      складність O(N).
      Умова виклику value.remove(i) також у середньому має часову складність O(N), оскільки при видаленні елемента
      списку індексація елементів зсувається.
      O(1) + O(1) + O(N) + O(N) = O(N)
      Отже, загальна часова складність цього коду становить O(N).

7. T: Напишіть в нотації Великого О, яка часова складність даного коду, якщо в списку a є N елементів:
        work_list = [*a]  # O(N)
        for i in range(len(work_list)):  # O(N)
            for j in range(1, len(work_list)):  # O(N)
                if work_list[j-1] > work_list[j]:  # O(1)
                    buffer = work_list[j-1]        # O(1)
                    work_list[j-1] = work_list[j]  # O(1)
                    work_list[j] = buffer          # O(1)
   A: Загальна кількість операцій, яку потрібно виконати, є добутком кількості операцій у зовнішньому та
      внутрішньому циклах. Це дорівнює N * N, таким чином часова складність коду буде O(N^2), де N - кількість елементів у списку.


8. T: Напишіть в нотації Великого О, яка часова складність даного коду, якщо в списку some_list є N елементів:
        result = {}
        for elem in some_list:
            if elem not in result:
                result[elem] = True

   A: Проходження по елементам у списку some_list виконується за O(N), де N - кількість елементів у списку.
      Умова if elem not in result вимагає O(1) часу для перевірки, оскільки ми використовуємо словник (result) для
      збереження унікальних значень. Додавання нового елемента до словника також O(1).
      Загальна часова складність коду - O(N).